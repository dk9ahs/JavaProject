package com.project.springboot;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import jakarta.servlet.http.HttpServletRequest;

@Controller
public class MyController {

    @RequestMapping("/")	// 이것이 없으면 화이트 라벨 에러가 나옴.
    public @ResponseBody String root() throws Exception{
        return "Form 데이터 전달받아 사용하기";
    }
 
    // 서블릿 처럼 request내장객체를 통해 폼값을 받아 처리한다.
    @RequestMapping("/test1")	// jsp 방법으로 파라미터 대입. 잘 안쓰임
    public String test1(HttpServletRequest httpServletRequest, Model model) {
    	// getParameter()메서드를 통해 폼값을 받아 변수에 저장한다.  
    	String id = httpServletRequest.getParameter("id");	
		String name = httpServletRequest.getParameter("name");

		// View로 전달할 데이터를 Model객체에 저장한다.
		model.addAttribute("id", id);
        model.addAttribute("name", name);

        return "test1";       
    }

    // 어노테이션을 통해 파라미터를 받은 후 변수에 저장한다.
    @RequestMapping("/test2")	
    // 스프링부트에서 많이 쓰임. 파라미터가 많아지면 불편해진다.
    public String test2(@RequestParam("id") String id,
    		            @RequestParam("name") String name,
    		            Model model)
    {
    	/*
			형식 : @RequestParam(전송된 파라미터명) String 메서드에서 사용할
				변수명
		*/
    	// Model객체에 데이터를 저장한 후 View의 경로를 반환한다.
		model.addAttribute("id", id);
        model.addAttribute("name", name);

        return "test2";       
    }

}